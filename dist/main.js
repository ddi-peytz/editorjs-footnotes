!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){window,t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=0)}([function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}n(1).toString();
/**
 * Base Paragraph Block for the Editor.js.
 * Represents simple paragraph
 *
 * @author CodeX (team@codex.so)
 * @copyright CodeX 2018
 * @license The MIT License (MIT)
 */
var i=function(){function t(e){var n=e.data,r=e.config,o=e.api;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.api=o,this._CSS={block:this.api.styles.block,wrapper:"ce-paragraph"},this.onKeyUp=this.onKeyUp.bind(this),this._placeholder=r.placeholder?r.placeholder:t.DEFAULT_PLACEHOLDER,this._data={},this._element=this.drawView(),this._preserveBlank=void 0!==r.preserveBlank&&r.preserveBlank,this.data=n}return o(t,null,[{key:"DEFAULT_PLACEHOLDER",get:function(){return""}}]),o(t,[{key:"onKeyUp",value:function(t){"Backspace"!==t.code&&"Delete"!==t.code||""===this._element.textContent&&(this._element.innerHTML="")}},{key:"drawView",value:function(){var t=document.createElement("DIV");return t.classList.add(this._CSS.wrapper,this._CSS.block),t.contentEditable=!0,t.dataset.placeholder=this._placeholder,t.addEventListener("keyup",this.onKeyUp),t}},{key:"render",value:function(){return this._element}},{key:"merge",value:function(t){var e={text:this.data.text+t.text};this.data=e}},{key:"validate",value:function(t){return!(""===t.text.trim()&&!this._preserveBlank)}},{key:"save",value:function(t){return{text:t.innerHTML}}},{key:"onPaste",value:function(t){var e={text:t.detail.data.innerHTML};this.data=e}},{key:"data",get:function(){var t=this._element.innerHTML;return this._data.text=t,this._data},set:function(t){this._data=t||{},this._element.innerHTML=this._data.text||""}}],[{key:"conversionConfig",get:function(){return{export:"text",import:"text"}}},{key:"sanitize",get:function(){return{text:{br:!0}}}},{key:"pasteConfig",get:function(){return{tags:["P"]}}},{key:"toolbox",get:function(){return{icon:n(6).default,title:"Text"}}}]),t}();t.exports=i},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]),n(4)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,".ce-paragraph {\n    line-height: 1.6em;\n    outline: none;\n}\n\n.ce-paragraph[data-placeholder]:empty::before{\n  content: attr(data-placeholder);\n  color: #707684;\n  font-weight: normal;\n  opacity: 0;\n}\n\n/** Show placeholder at the first paragraph if Editor is empty */\n.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before {\n  opacity: 1;\n}\n\n.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before,\n.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus::before {\n  opacity: 0;\n}\n\n.ce-paragraph p:first-of-type{\n    margin-top: 0;\n}\n\n.ce-paragraph p:last-of-type{\n    margin-bottom: 0;\n}\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,r=t[1]||"",o=t[3];if(!o)return r;if(e&&"function"==typeof btoa){var i=(n=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),a=o.sources.map((function(t){return"/*# sourceURL="+o.sourceRoot+t+" */"}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),c=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,s=0,l=[],f=n(5);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(m(r.parts[a],e))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(m(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:c}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):n.push(r[a]={id:a,parts:[c]})}return n}function h(t,e){var n=c(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function y(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function v(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function m(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var a=s++;n=u||(u=v(e)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=t.href;t.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,n,e),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=function(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var a=n[o];(c=i[a.id]).refs--,r.push(c)}for(t&&p(d(t,e),e),o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete i[c.id]}}}};var g,x=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function w(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(t,e,n){"use strict";n.r(e),e.default='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0.2 -0.3 9 11.4" width="12" height="14">\n  <path d="M0 2.77V.92A1 1 0 01.2.28C.35.1.56 0 .83 0h7.66c.28.01.48.1.63.28.14.17.21.38.21.64v1.85c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26a1 1 0 01-.21-.66V1.69H5.6v7.58h.5c.25 0 .45.08.6.23.17.16.25.35.25.6s-.08.45-.24.6a.87.87 0 01-.62.22H3.21a.87.87 0 01-.61-.22.78.78 0 01-.24-.6c0-.25.08-.44.24-.6a.85.85 0 01.61-.23h.5V1.7H1.73v1.08c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26A1 1 0 010 2.77z"/>\n</svg>\n'}])},function(t,e,n){"use strict";n.r(e),n.d(e,"Footnote",(function(){})),n.d(e,"FootnoteMaker",(function(){return d}));var r=n(0);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=l(t);if(e){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?s(t):e}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}n.n(r).a;function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,e,n){return e&&f(t.prototype,e),n&&f(t,n),t}var d=function(){function t(e){var n=e.api;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.api=n,this.button=null,this.state=!1}return p(t,null,[{key:"isInline",get:function(){return!0}}]),p(t,[{key:"render",value:function(){return this.button=document.createElement("button"),this.button.type="button",this.button.textContent="M",this.button.classList.add(this.api.styles.inlineToolButton),this.button}},{key:"surround",value:function(t){if(console.log("this.state",this.state),console.log(),!this.state){var e=t.extractContents(),n=Date.now().toString(36),r=document.createElement("a");r.href="#"+n;var o=document.createElement("small");o.innerHTML=" [ #"+n+" ]",r.appendChild(e),r.appendChild(o),t.insertNode(r);this.api.blocks.insert("footnote",{id:n},void 0,void 0,!0);console.log(this.api.blocks.getBlockByIndex(this.api.blocks.getCurrentBlockIndex()).save().then((function(t){return console.log(t)}))),this.api.inlineToolbar.close()}}},{key:"clear",value:function(){console.log("Clear called")}},{key:"checkState",value:function(t){var e=t.anchorNode;if(e){var n=e instanceof Element?e:e.parentElement;this.state=!!n.closest("MARK")}}}]),t}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9wYXJhZ3JhcGgvZGlzdC9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zvb3Rub3RlLmpzIiwid2VicGFjazovLy8uL3NyYy9Gb290bm90ZU1ha2VyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwid2luZG93IiwiZSIsImRlZmF1bHQiLCJsZW5ndGgiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInRvU3RyaW5nIiwiZGF0YSIsImNvbmZpZyIsImFwaSIsIlR5cGVFcnJvciIsInRoaXMiLCJfQ1NTIiwiYmxvY2siLCJzdHlsZXMiLCJ3cmFwcGVyIiwib25LZXlVcCIsIl9wbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyIiwiREVGQVVMVF9QTEFDRUhPTERFUiIsIl9kYXRhIiwiX2VsZW1lbnQiLCJkcmF3VmlldyIsIl9wcmVzZXJ2ZUJsYW5rIiwicHJlc2VydmVCbGFuayIsImNvZGUiLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImNvbnRlbnRFZGl0YWJsZSIsImRhdGFzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwidGV4dCIsInRyaW0iLCJkZXRhaWwiLCJzZXQiLCJleHBvcnQiLCJpbXBvcnQiLCJiciIsInRhZ3MiLCJpY29uIiwidGl0bGUiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwicHVzaCIsIm1hcCIsImEiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJqb2luIiwiYWxsIiwiYXRvYiIsImFwcGx5IiwiYXJndW1lbnRzIiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInUiLCJmIiwiaWQiLCJyZWZzIiwicGFydHMiLCJiYXNlIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJoIiwiRXJyb3IiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwidiIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImluZGV4T2YiLCJzcGxpY2UiLCJ5IiwiYXR0cnMiLCJ0eXBlIiwiYiIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwic2luZ2xldG9uIiwidyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIkRFQlVHIiwiZyIsIngiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY2hpbGROb2RlcyIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwicGF0aG5hbWUiLCJyZXBsYWNlIiwidGVzdCIsIlBhcmFncmFwaCIsIkZvb3Rub3RlTWFrZXIiLCJidXR0b24iLCJzdGF0ZSIsImlubGluZVRvb2xCdXR0b24iLCJyYW5nZSIsImNvbnNvbGUiLCJsb2ciLCJzZWxlY3RlZFRleHQiLCJleHRyYWN0Q29udGVudHMiLCJEYXRlIiwibm93IiwibWFyayIsImZvb3Rub3RlTnVtYmVyIiwiaW5zZXJ0Tm9kZSIsImJsb2NrcyIsImluc2VydCIsInVuZGVmaW5lZCIsImdldEJsb2NrQnlJbmRleCIsImdldEN1cnJlbnRCbG9ja0luZGV4Iiwic2F2ZSIsInRoZW4iLCJpbmxpbmVUb29sYmFyIiwiY2xvc2UiLCJzZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yRWxlbWVudCIsIkVsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwiY2xvc2VzdCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9C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aEIsaUNBa0ZhaUIsR0FDVCxJQUFNL0csRUFBTytHLEVBQVVDLFdBRXZCLEdBQUtoSCxFQUFMLENBSUEsSUFBTWlILEVBQWdCakgsYUFBZ0JrSCxRQUFVbEgsRUFBT0EsRUFBS21ILGNBRTVEM0ksS0FBS2tILFFBQVV1QixFQUFjRyxRQUFRLGFBM0Z6QyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5QYXJhZ3JhcGg9dCgpOmUuUGFyYWdyYXBoPXQoKX0od2luZG93LGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBvPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgcj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSluLmQocixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiByfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiL1wiLG4obi5zPTApfShbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIG8oZSx0LG4pe3JldHVybiB0JiZyKGUucHJvdG90eXBlLHQpLG4mJnIoZSxuKSxlfW4oMSkudG9TdHJpbmcoKTtcbi8qKlxuICogQmFzZSBQYXJhZ3JhcGggQmxvY2sgZm9yIHRoZSBFZGl0b3IuanMuXG4gKiBSZXByZXNlbnRzIHNpbXBsZSBwYXJhZ3JhcGhcbiAqXG4gKiBAYXV0aG9yIENvZGVYICh0ZWFtQGNvZGV4LnNvKVxuICogQGNvcHlyaWdodCBDb2RlWCAyMDE4XG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xudmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBuPXQuZGF0YSxyPXQuY29uZmlnLG89dC5hcGk7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmFwaT1vLHRoaXMuX0NTUz17YmxvY2s6dGhpcy5hcGkuc3R5bGVzLmJsb2NrLHdyYXBwZXI6XCJjZS1wYXJhZ3JhcGhcIn0sdGhpcy5vbktleVVwPXRoaXMub25LZXlVcC5iaW5kKHRoaXMpLHRoaXMuX3BsYWNlaG9sZGVyPXIucGxhY2Vob2xkZXI/ci5wbGFjZWhvbGRlcjplLkRFRkFVTFRfUExBQ0VIT0xERVIsdGhpcy5fZGF0YT17fSx0aGlzLl9lbGVtZW50PXRoaXMuZHJhd1ZpZXcoKSx0aGlzLl9wcmVzZXJ2ZUJsYW5rPXZvaWQgMCE9PXIucHJlc2VydmVCbGFuayYmci5wcmVzZXJ2ZUJsYW5rLHRoaXMuZGF0YT1ufXJldHVybiBvKGUsbnVsbCxbe2tleTpcIkRFRkFVTFRfUExBQ0VIT0xERVJcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIlwifX1dKSxvKGUsW3trZXk6XCJvbktleVVwXCIsdmFsdWU6ZnVuY3Rpb24oZSl7XCJCYWNrc3BhY2VcIiE9PWUuY29kZSYmXCJEZWxldGVcIiE9PWUuY29kZXx8XCJcIj09PXRoaXMuX2VsZW1lbnQudGV4dENvbnRlbnQmJih0aGlzLl9lbGVtZW50LmlubmVySFRNTD1cIlwiKX19LHtrZXk6XCJkcmF3Vmlld1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtyZXR1cm4gZS5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy53cmFwcGVyLHRoaXMuX0NTUy5ibG9jayksZS5jb250ZW50RWRpdGFibGU9ITAsZS5kYXRhc2V0LnBsYWNlaG9sZGVyPXRoaXMuX3BsYWNlaG9sZGVyLGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsdGhpcy5vbktleVVwKSxlfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VsZW1lbnR9fSx7a2V5OlwibWVyZ2VcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17dGV4dDp0aGlzLmRhdGEudGV4dCtlLnRleHR9O3RoaXMuZGF0YT10fX0se2tleTpcInZhbGlkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIShcIlwiPT09ZS50ZXh0LnRyaW0oKSYmIXRoaXMuX3ByZXNlcnZlQmxhbmspfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm57dGV4dDplLmlubmVySFRNTH19fSx7a2V5Olwib25QYXN0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXt0ZXh0OmUuZGV0YWlsLmRhdGEuaW5uZXJIVE1MfTt0aGlzLmRhdGE9dH19LHtrZXk6XCJkYXRhXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fZWxlbWVudC5pbm5lckhUTUw7cmV0dXJuIHRoaXMuX2RhdGEudGV4dD1lLHRoaXMuX2RhdGF9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9kYXRhPWV8fHt9LHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MPXRoaXMuX2RhdGEudGV4dHx8XCJcIn19XSxbe2tleTpcImNvbnZlcnNpb25Db25maWdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57ZXhwb3J0OlwidGV4dFwiLGltcG9ydDpcInRleHRcIn19fSx7a2V5Olwic2FuaXRpemVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57dGV4dDp7YnI6ITB9fX19LHtrZXk6XCJwYXN0ZUNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybnt0YWdzOltcIlBcIl19fX0se2tleTpcInRvb2xib3hcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aWNvbjpuKDYpLmRlZmF1bHQsdGl0bGU6XCJUZXh0XCJ9fX1dKSxlfSgpO2UuZXhwb3J0cz1pfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pO3ZhciBvPXtobXI6ITAsdHJhbnNmb3JtOnZvaWQgMCxpbnNlcnRJbnRvOnZvaWQgMH07big0KShyLG8pO3IubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKX0sZnVuY3Rpb24oZSx0LG4peyhlLmV4cG9ydHM9bigzKSghMSkpLnB1c2goW2UuaSxcIi5jZS1wYXJhZ3JhcGgge1xcbiAgICBsaW5lLWhlaWdodDogMS42ZW07XFxuICAgIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi5jZS1wYXJhZ3JhcGhbZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6OmJlZm9yZXtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1wbGFjZWhvbGRlcik7XFxuICBjb2xvcjogIzcwNzY4NDtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4vKiogU2hvdyBwbGFjZWhvbGRlciBhdCB0aGUgZmlyc3QgcGFyYWdyYXBoIGlmIEVkaXRvciBpcyBlbXB0eSAqL1xcbi5jb2RleC1lZGl0b3ItLWVtcHR5IC5jZS1ibG9jazpmaXJzdC1jaGlsZCAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmUge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmNvZGV4LWVkaXRvci0tdG9vbGJveC1vcGVuZWQgLmNlLWJsb2NrOmZpcnN0LWNoaWxkIC5jZS1wYXJhZ3JhcGhbZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6OmJlZm9yZSxcXG4uY29kZXgtZWRpdG9yLS1lbXB0eSAuY2UtYmxvY2s6Zmlyc3QtY2hpbGQgLmNlLXBhcmFncmFwaFtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpmb2N1czo6YmVmb3JlIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5jZS1wYXJhZ3JhcGggcDpmaXJzdC1vZi10eXBle1xcbiAgICBtYXJnaW4tdG9wOiAwO1xcbn1cXG5cXG4uY2UtcGFyYWdyYXBoIHA6bGFzdC1vZi10eXBle1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHQpe3ZhciBuPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZVsxXXx8XCJcIixyPWVbM107aWYoIXIpcmV0dXJuIG47aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIG89KGE9cixcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKStcIiAqL1wiKSxpPXIuc291cmNlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiK3Iuc291cmNlUm9vdCtlK1wiICovXCJ9KTtyZXR1cm5bbl0uY29uY2F0KGkpLmNvbmNhdChbb10pLmpvaW4oXCJcXG5cIil9dmFyIGE7cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIrdFsyXStcIntcIituK1wifVwiOm59KS5qb2luKFwiXCIpfSx0Lmk9ZnVuY3Rpb24oZSxuKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9W1tudWxsLGUsXCJcIl1dKTtmb3IodmFyIHI9e30sbz0wO288dGhpcy5sZW5ndGg7bysrKXt2YXIgaT10aGlzW29dWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYocltpXT0hMCl9Zm9yKG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIGE9ZVtvXTtcIm51bWJlclwiPT10eXBlb2YgYVswXSYmclthWzBdXXx8KG4mJiFhWzJdP2FbMl09bjpuJiYoYVsyXT1cIihcIithWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLHQucHVzaChhKSl9fSx0fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByLG8saT17fSxhPShyPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9ifSxmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1vJiYobz1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKSksb30pLHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpcmV0dXJuIGUoKTtpZih2b2lkIDA9PT10W2VdKXt2YXIgbj1mdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX0uY2FsbCh0aGlzLGUpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKGUpe249bnVsbH10W2VdPW59cmV0dXJuIHRbZV19fSgpLGM9bnVsbCx1PTAsZj1bXSxsPW4oNSk7ZnVuY3Rpb24gcChlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dLG89aVtyLmlkXTtpZihvKXtvLnJlZnMrKztmb3IodmFyIGE9MDthPG8ucGFydHMubGVuZ3RoO2ErKylvLnBhcnRzW2FdKHIucGFydHNbYV0pO2Zvcig7YTxyLnBhcnRzLmxlbmd0aDthKyspby5wYXJ0cy5wdXNoKG0oci5wYXJ0c1thXSx0KSl9ZWxzZXt2YXIgcz1bXTtmb3IoYT0wO2E8ci5wYXJ0cy5sZW5ndGg7YSsrKXMucHVzaChtKHIucGFydHNbYV0sdCkpO2lbci5pZF09e2lkOnIuaWQscmVmczoxLHBhcnRzOnN9fX19ZnVuY3Rpb24gZChlLHQpe2Zvcih2YXIgbj1bXSxyPXt9LG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIGk9ZVtvXSxhPXQuYmFzZT9pWzBdK3QuYmFzZTppWzBdLHM9e2NzczppWzFdLG1lZGlhOmlbMl0sc291cmNlTWFwOmlbM119O3JbYV0/clthXS5wYXJ0cy5wdXNoKHMpOm4ucHVzaChyW2FdPXtpZDphLHBhcnRzOltzXX0pfXJldHVybiBufWZ1bmN0aW9uIGgoZSx0KXt2YXIgbj1zKGUuaW5zZXJ0SW50byk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7dmFyIHI9ZltmLmxlbmd0aC0xXTtpZihcInRvcFwiPT09ZS5pbnNlcnRBdClyP3IubmV4dFNpYmxpbmc/bi5pbnNlcnRCZWZvcmUodCxyLm5leHRTaWJsaW5nKTpuLmFwcGVuZENoaWxkKHQpOm4uaW5zZXJ0QmVmb3JlKHQsbi5maXJzdENoaWxkKSxmLnB1c2godCk7ZWxzZSBpZihcImJvdHRvbVwiPT09ZS5pbnNlcnRBdCluLmFwcGVuZENoaWxkKHQpO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuaW5zZXJ0QXR8fCFlLmluc2VydEF0LmJlZm9yZSl0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTt2YXIgbz1zKGUuaW5zZXJ0SW50bytcIiBcIitlLmluc2VydEF0LmJlZm9yZSk7bi5pbnNlcnRCZWZvcmUodCxvKX19ZnVuY3Rpb24gdihlKXtpZihudWxsPT09ZS5wYXJlbnROb2RlKXJldHVybiExO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTt2YXIgdD1mLmluZGV4T2YoZSk7dD49MCYmZi5zcGxpY2UodCwxKX1mdW5jdGlvbiB5KGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdm9pZCAwPT09ZS5hdHRycy50eXBlJiYoZS5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksYih0LGUuYXR0cnMpLGgoZSx0KSx0fWZ1bmN0aW9uIGIoZSx0KXtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKG4pe2Uuc2V0QXR0cmlidXRlKG4sdFtuXSl9KX1mdW5jdGlvbiBtKGUsdCl7dmFyIG4scixvLGk7aWYodC50cmFuc2Zvcm0mJmUuY3NzKXtpZighKGk9dC50cmFuc2Zvcm0oZS5jc3MpKSlyZXR1cm4gZnVuY3Rpb24oKXt9O2UuY3NzPWl9aWYodC5zaW5nbGV0b24pe3ZhciBhPXUrKztuPWN8fChjPXkodCkpLHI9dy5iaW5kKG51bGwsbixhLCExKSxvPXcuYmluZChudWxsLG4sYSwhMCl9ZWxzZSBlLnNvdXJjZU1hcCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBCbG9iJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hPyhuPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO3JldHVybiB2b2lkIDA9PT1lLmF0dHJzLnR5cGUmJihlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSxlLmF0dHJzLnJlbD1cInN0eWxlc2hlZXRcIixiKHQsZS5hdHRycyksaChlLHQpLHR9KHQpLHI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4uY3NzLG89bi5zb3VyY2VNYXAsaT12b2lkIDA9PT10LmNvbnZlcnRUb0Fic29sdXRlVXJscyYmbzsodC5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGkpJiYocj1sKHIpKTtvJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG8pKSkpK1wiICovXCIpO3ZhciBhPW5ldyBCbG9iKFtyXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPWUuaHJlZjtlLmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChhKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfS5iaW5kKG51bGwsbix0KSxvPWZ1bmN0aW9uKCl7dihuKSxuLmhyZWYmJlVSTC5yZXZva2VPYmplY3RVUkwobi5ocmVmKX0pOihuPXkodCkscj1mdW5jdGlvbihlLHQpe3ZhciBuPXQuY3NzLHI9dC5tZWRpYTtyJiZlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIscik7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PW47ZWxzZXtmb3IoO2UuZmlyc3RDaGlsZDspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobikpfX0uYmluZChudWxsLG4pLG89ZnVuY3Rpb24oKXt2KG4pfSk7cmV0dXJuIHIoZSksZnVuY3Rpb24odCl7aWYodCl7aWYodC5jc3M9PT1lLmNzcyYmdC5tZWRpYT09PWUubWVkaWEmJnQuc291cmNlTWFwPT09ZS5zb3VyY2VNYXApcmV0dXJuO3IoZT10KX1lbHNlIG8oKX19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIERFQlVHJiZERUJVRyYmXCJvYmplY3RcIiE9dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTsodD10fHx7fSkuYXR0cnM9XCJvYmplY3RcIj09dHlwZW9mIHQuYXR0cnM/dC5hdHRyczp7fSx0LnNpbmdsZXRvbnx8XCJib29sZWFuXCI9PXR5cGVvZiB0LnNpbmdsZXRvbnx8KHQuc2luZ2xldG9uPWEoKSksdC5pbnNlcnRJbnRvfHwodC5pbnNlcnRJbnRvPVwiaGVhZFwiKSx0Lmluc2VydEF0fHwodC5pbnNlcnRBdD1cImJvdHRvbVwiKTt2YXIgbj1kKGUsdCk7cmV0dXJuIHAobix0KSxmdW5jdGlvbihlKXtmb3IodmFyIHI9W10sbz0wO288bi5sZW5ndGg7bysrKXt2YXIgYT1uW29dOyhzPWlbYS5pZF0pLnJlZnMtLSxyLnB1c2gocyl9ZSYmcChkKGUsdCksdCk7Zm9yKG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIHM7aWYoMD09PShzPXJbb10pLnJlZnMpe2Zvcih2YXIgYz0wO2M8cy5wYXJ0cy5sZW5ndGg7YysrKXMucGFydHNbY10oKTtkZWxldGUgaVtzLmlkXX19fX07dmFyIGcseD0oZz1bXSxmdW5jdGlvbihlLHQpe3JldHVybiBnW2VdPXQsZy5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIHcoZSx0LG4scil7dmFyIG89bj9cIlwiOnIuY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD14KHQsbyk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSxhPWUuY2hpbGROb2RlczthW3RdJiZlLnJlbW92ZUNoaWxkKGFbdF0pLGEubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKGksYVt0XSk6ZS5hcHBlbmRDaGlsZChpKX19fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb247aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBlO3ZhciBuPXQucHJvdG9jb2wrXCIvL1wiK3QuaG9zdCxyPW4rdC5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sXCIvXCIpO3JldHVybiBlLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLGZ1bmN0aW9uKGUsdCl7dmFyIG8saT10LnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLyxmdW5jdGlvbihlLHQpe3JldHVybiB0fSkucmVwbGFjZSgvXicoLiopJyQvLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9KTtyZXR1cm4vXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGkpP2U6KG89MD09PWkuaW5kZXhPZihcIi8vXCIpP2k6MD09PWkuaW5kZXhPZihcIi9cIik/bitpOnIraS5yZXBsYWNlKC9eXFwuXFwvLyxcIlwiKSxcInVybChcIitKU09OLnN0cmluZ2lmeShvKStcIilcIil9KX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtuLnIodCksdC5kZWZhdWx0PSc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMC4yIC0wLjMgOSAxMS40XCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjE0XCI+XFxuICA8cGF0aCBkPVwiTTAgMi43N1YuOTJBMSAxIDAgMDEuMi4yOEMuMzUuMS41NiAwIC44MyAwaDcuNjZjLjI4LjAxLjQ4LjEuNjMuMjguMTQuMTcuMjEuMzguMjEuNjR2MS44NWMwIC4yNi0uMDguNDgtLjIzLjY2LS4xNS4xNy0uMzcuMjYtLjY2LjI2LS4yOCAwLS41LS4wOS0uNjQtLjI2YTEgMSAwIDAxLS4yMS0uNjZWMS42OUg1LjZ2Ny41OGguNWMuMjUgMCAuNDUuMDguNi4yMy4xNy4xNi4yNS4zNS4yNS42cy0uMDguNDUtLjI0LjZhLjg3Ljg3IDAgMDEtLjYyLjIySDMuMjFhLjg3Ljg3IDAgMDEtLjYxLS4yMi43OC43OCAwIDAxLS4yNC0uNmMwLS4yNS4wOC0uNDQuMjQtLjZhLjg1Ljg1IDAgMDEuNjEtLjIzaC41VjEuN0gxLjczdjEuMDhjMCAuMjYtLjA4LjQ4LS4yMy42Ni0uMTUuMTctLjM3LjI2LS42Ni4yNi0uMjggMC0uNS0uMDktLjY0LS4yNkExIDEgMCAwMTAgMi43N3pcIi8+XFxuPC9zdmc+XFxuJ31dKX0pOyIsImltcG9ydCBQYXJhZ3JhcGggZnJvbSBcIkBlZGl0b3Jqcy9wYXJhZ3JhcGhcIjtcblxuZXhwb3J0IGNsYXNzIEZvb3Rub3RlUGFyYWdyYXBoIGV4dGVuZHMgUGFyYWdyYXBoIHtcbiAgY29uc3RydWN0b3IoeyBkYXRhLCBjb25maWcsIGFwaSB9KSB7XG4gICAgc3VwZXIoeyBkYXRhLCBjb25maWcsIGFwaSB9KTtcblxuICAgIC8vIGlmIG5vIElEIGlzIHNldCwgc2V0IG9uZVxuICAgIGlmICghZGF0YS5pZCkge1xuICAgICAgY29uc3QgaW5pdGlhbElEID0gXCJmbi1cIiArIERhdGUubm93KCkudG9TdHJpbmcoMzYpO1xuICAgICAgdGhpcy5fZGF0YS5pZCA9IGluaXRpYWxJRDtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGEudGV4dCkge1xuICAgICAgdGhpcy5fZGF0YS50ZXh0ID0gXCJcIjtcbiAgICB9XG5cbiAgICB0aGlzLmVuYWJsZUVtYmVkQ29kZSA9IGZhbHNlO1xuXG4gICAgdGhpcy50b2dnbGVFbWJlZENvZGUgPSB0aGlzLnRvZ2dsZUVuYWJsZUVtYmVkQ29kZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVuZGVyRW1iZWRDb2RlID0gdGhpcy5yZW5kZXJFbWJlZENvZGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhdmUgPSB0aGlzLnNhdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXJTZXR0aW5ncyA9IHRoaXMucmVuZGVyU2V0dGluZ3MuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYWRkRW1iZWRDb2RlXCIsXG4gICAgICAgIGljb246IGA8PmAsXG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGhhbmRsZUNsaWNrOiB0aGlzLnRvZ2dsZUVtYmVkQ29kZS5iaW5kKHRoaXMpLFxuICAgICAgfSxcbiAgICBdO1xuICB9XG5cbiAgcmVuZGVyRW1iZWRDb2RlKCkge1xuICAgIGxldCBwcmV2aWV3ID0gdGhpcy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuZW1iZWQtcHJldmlld1wiKTtcbiAgICBsZXQgZW1iZWRDb2RlID0gdGhpcy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuZW1iZWQtY29kZVwiKS52YWx1ZTtcbiAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBlbWJlZCBjb2RlXCIsIHRoaXMud3JhcHBlcik7XG5cbiAgICBpZiAoIXRoaXMuZW5hYmxlRW1iZWRDb2RlKSB7XG4gICAgICAvLyByZW1vdmUgcHJldmlld1xuICAgICAgaWYgKHByZXZpZXcpIHtcbiAgICAgICAgcHJldmlldy5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXByZXZpZXcpIHtcbiAgICAgIHByZXZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgcHJldmlldy5jbGFzc0xpc3QuYWRkKFwiZW1iZWQtcHJldmlld1wiKTtcbiAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZChwcmV2aWV3KTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhcInJlbmRlckVtYmVkQ29kZVwiLCBwcmV2aWV3LCB0aGlzLmRhdGEpO1xuXG4gICAgcHJldmlldy5pbm5lckhUTUwgPSBlbWJlZENvZGU7XG4gIH1cblxuICB0b2dnbGVFbmFibGVFbWJlZENvZGUoKSB7XG4gICAgdGhpcy5lbmFibGVFbWJlZENvZGUgPSAhdGhpcy5lbmFibGVFbWJlZENvZGU7XG4gICAgY29uc29sZS5sb2coXCJ0b2dnbGluZyBlbWJlZCBjb2RlOiBcIiwgdGhpcy5lbmFibGVFbWJlZENvZGUsIHRoaXMuZGF0YSk7XG5cbiAgICBjb25zb2xlLmxvZyhcInRoaXMud3JhcHBlclwiLCB0aGlzLndyYXBwZXIpO1xuICAgIGxldCBlbWJlZENvZGUgPSB0aGlzLndyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5lbWJlZC1jb2RlXCIpO1xuXG4gICAgaWYgKHRoaXMuZW5hYmxlRW1iZWRDb2RlKSB7XG4gICAgICBpZiAoZW1iZWRDb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVtYmVkQ29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgIGVtYmVkQ29kZS5jbGFzc0xpc3QuYWRkKFwiZW1iZWQtY29kZVwiKTtcbiAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZChlbWJlZENvZGUpO1xuICAgICAgZW1iZWRDb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5yZW5kZXJFbWJlZENvZGUpO1xuICAgICAgZW1iZWRDb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLnJlbmRlckVtYmVkQ29kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtYmVkQ29kZS5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IHNhbml0aXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogZmFsc2UsXG4gICAgICB0ZXh0OiB7IGk6IHRydWUsIGE6IHRydWUsIGI6IHRydWUgfSxcbiAgICAgIGVtYmVkQ29kZTogdHJ1ZSxcbiAgICB9O1xuICB9XG5cbiAgc2F2ZShibG9ja0NvbnRlbnQpIHtcbiAgICBjb25zdCBjb250ZW50ID0gYmxvY2tDb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudC1hcmVhXCIpO1xuICAgIGNvbnN0IHRleHQgPSBjb250ZW50ID8gY29udGVudC5pbm5lckhUTUwgOiBcIlwiO1xuXG4gICAgY29uc3QgaWQgPSBibG9ja0NvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5tZXRhLWJhclwiKS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpO1xuXG4gICAgY29uc3QgZW1iZWRDb2RlID0gYmxvY2tDb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZW1iZWQtY29kZVwiKVxuICAgICAgPyBibG9ja0NvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5lbWJlZC1jb2RlXCIpLnZhbHVlXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnNvbGUubG9nKFwic2F2ZS5lbWJlZENvZGVcIiwgZW1iZWRDb2RlKTtcblxuICAgIGNvbnN0IHJldCA9IHtcbiAgICAgIGlkLFxuICAgICAgdGV4dCxcbiAgICAgIGVtYmVkQ29kZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHJlbmRlclNldHRpbmdzKCkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgdGhpcy5zZXR0aW5ncy5mb3JFYWNoKCh0dW5lKSA9PiB7XG4gICAgICBsZXQgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjZHgtc2V0dGluZ3MtYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uLmlubmVySFRNTCA9IHR1bmUuaWNvbjtcbiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgICAgaWYgKHR1bmUuYWN0aXZlKSB7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2R4LXNldHRpbmdzLWJ1dHRvbi0tYWN0aXZlXCIpO1xuICAgICAgfVxuXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHR1bmUuaGFuZGxlQ2xpY2spO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiZm9vdG5vdGUtYmxvY2tcIik7XG5cbiAgICBjb25zdCBtZXRhQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBtZXRhQmFyLmNsYXNzTGlzdC5hZGQoXCJtZXRhLWJhclwiKTtcbiAgICBtZXRhQmFyLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgdGhpcy5kYXRhLmlkKTtcbiAgICBtZXRhQmFyLmlubmVySFRNTCA9IFwiWyAjXCIgKyB0aGlzLmRhdGEuaWQgKyBcIiBdIFwiO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobWV0YUJhcik7XG5cbiAgICBjb25zdCBjb250ZW50QXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGVudEFyZWEuY2xhc3NMaXN0LmFkZChcImNvbnRlbnQtYXJlYVwiKTtcbiAgICBjb250ZW50QXJlYS5jbGFzc0xpc3QuYWRkKFwiY2UtcGFyYWdyYXBoXCIpO1xuICAgIGNvbnRlbnRBcmVhLmlubmVySFRNTCA9IHRoaXMuZGF0YS50ZXh0O1xuICAgIGNvbnRlbnRBcmVhLmNvbnRlbnRFZGl0YWJsZSA9IHRydWU7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChjb250ZW50QXJlYSk7XG5cbiAgICBjb250ZW50QXJlYS5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5vbktleVVwKTtcblxuICAgIHRoaXMud3JhcHBlciA9IHdyYXBwZXI7XG5cbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJY29uIGFuZCB0aXRsZSBmb3IgZGlzcGxheWluZyBhdCB0aGUgVG9vbGJveFxuICAgKlxuICAgKiBAcmV0dXJuIHt7aWNvbjogc3RyaW5nLCB0aXRsZTogc3RyaW5nfX1cbiAgICovXG4gIHN0YXRpYyBnZXQgdG9vbGJveCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogXCJGXCIsXG4gICAgICB0aXRsZTogXCJGb290bm90ZVwiLFxuICAgIH07XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBGb290bm90ZU1ha2VyIHtcbiAgc3RhdGljIGdldCBpc0lubGluZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHsgYXBpIH0pIHtcbiAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICB0aGlzLmJ1dHRvbiA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICB0aGlzLmJ1dHRvbi50eXBlID0gXCJidXR0b25cIjtcbiAgICB0aGlzLmJ1dHRvbi50ZXh0Q29udGVudCA9IFwiTVwiO1xuICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5hcGkuc3R5bGVzLmlubGluZVRvb2xCdXR0b24pO1xuXG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uO1xuICB9XG5cbiAgc3Vycm91bmQocmFuZ2UpIHtcbiAgICAvLyBUT0RPIC0gQ2hlY2sgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbnkgPG1hcms+IGVsZW1lbnRzIGluc2lkZVxuICAgIC8vIHRoZSBzZWxlY3RlZFRleHQuIElmIHNvLCBkb24ndCBhbGxvdyBhIGZvb3Rub3RlIHRvIGJlIGNyZWF0ZWQuXG4gICAgLy8gaG93ZXZlciwgdGhpcyB3aWxsIHJlcXVpcmUgdXMgdG8gY3JlYXRlIGEgXCJkZWxldGVcIiBmb290bm90ZVxuICAgIC8vIGJ1dHRvbi4gT3Igd2UgY291bGQgYXV0b21hdGljYWxseSBicm9hZGVuIGEgZm9vdG5vdGUgd2hlblxuICAgIC8vIHRoZSB1c2VyIHNlbGVjdHMgYmV5b25kIGVpdGhlciBlbmQgb2YgYSBtYXJrLCBvciBzcmhpbmsgdGhlXG4gICAgLy8gZm9vdG5vdGUgd2hlbiB0aGUgdXNlciBzZWxlY3RzIHdpdGhpbiBpdC5cbiAgICAvLyBUaGUgd2F5IGxpbmsgaGFuZGxlcyBpdCBpcyBpZiBhbnkgcGFydCBvZiBhbiBleGlzdGluZyBsaW5rIGlzXG4gICAgLy8gc2VsZWN0ZWQsIHRoZSBpY29uIGNoYW5nZXMgdG8gYSBkZWxldGUgbGluayBpY29uLiB0aGlzIGlzXG4gICAgLy8gcHJvYmFibHkgYSBnb29kIHNvbHV0aW9uLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2RleC10ZWFtL2VkaXRvci5qcy9ibG9iL25leHQvc3JjL2NvbXBvbmVudHMvaW5saW5lLXRvb2xzL2lubGluZS10b29sLWxpbmsudHNcblxuICAgIGNvbnNvbGUubG9nKFwidGhpcy5zdGF0ZVwiLCB0aGlzLnN0YXRlKTtcbiAgICBjb25zb2xlLmxvZygpO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgIC8vIElmIGhpZ2hsaWdodHMgaXMgYWxyZWFkeSBhcHBsaWVkLCBkbyBub3RoaW5nIGZvciBub3dcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RlZFRleHQgPSByYW5nZS5leHRyYWN0Q29udGVudHMoKTtcblxuICAgIC8vIENyZWF0ZSBNQVJLIGVsZW1lbnRcbiAgICBjb25zdCBpZCA9IERhdGUubm93KCkudG9TdHJpbmcoMzYpO1xuXG4gICAgY29uc3QgbWFyayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIG1hcmsuaHJlZiA9IFwiI1wiICsgaWQ7XG5cbiAgICBjb25zdCBmb290bm90ZU51bWJlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzbWFsbFwiKTtcbiAgICBmb290bm90ZU51bWJlci5pbm5lckhUTUwgPSBcIiBbICNcIiArIGlkICsgXCIgXVwiO1xuXG4gICAgLy8gQXBwZW5kIHRvIHRoZSBNQVJLIGVsZW1lbnQgc2VsZWN0ZWQgVGV4dE5vZGVcbiAgICBtYXJrLmFwcGVuZENoaWxkKHNlbGVjdGVkVGV4dCk7XG4gICAgbWFyay5hcHBlbmRDaGlsZChmb290bm90ZU51bWJlcik7XG5cbiAgICAvLyBJbnNlcnQgbmV3IGVsZW1lbnRcbiAgICByYW5nZS5pbnNlcnROb2RlKG1hcmspO1xuXG4gICAgLy8gYWRkIGEgZm9vdG5vdGUgYmxvY2tcbiAgICBjb25zdCBuZXdCbG9jayA9IHRoaXMuYXBpLmJsb2Nrcy5pbnNlcnQoXG4gICAgICBcImZvb3Rub3RlXCIsXG4gICAgICB7IGlkIH0sXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgdGhpcy5hcGkuYmxvY2tzXG4gICAgICAgIC5nZXRCbG9ja0J5SW5kZXgodGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCkpXG4gICAgICAgIC5zYXZlKClcbiAgICAgICAgLnRoZW4oKGQpID0+IGNvbnNvbGUubG9nKGQpKVxuICAgICk7XG4gICAgdGhpcy5hcGkuaW5saW5lVG9vbGJhci5jbG9zZSgpO1xuXG4gICAgLy8gdGhpcy5hcGkuZm9jdXModGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCkgKyAxKVxuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgY29uc29sZS5sb2coXCJDbGVhciBjYWxsZWRcIik7XG4gIH1cblxuICBjaGVja1N0YXRlKHNlbGVjdGlvbikge1xuICAgIGNvbnN0IHRleHQgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcblxuICAgIGlmICghdGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSB0ZXh0IGluc3RhbmNlb2YgRWxlbWVudCA/IHRleHQgOiB0ZXh0LnBhcmVudEVsZW1lbnQ7XG5cbiAgICB0aGlzLnN0YXRlID0gISFhbmNob3JFbGVtZW50LmNsb3Nlc3QoXCJNQVJLXCIpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9